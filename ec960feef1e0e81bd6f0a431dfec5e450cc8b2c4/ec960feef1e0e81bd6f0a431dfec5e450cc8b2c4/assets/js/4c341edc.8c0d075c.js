"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[8245],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},s="Parser",l={unversionedId:"Assignments/Mini Shell/util/parser/README",id:"Assignments/Mini Shell/util/parser/README",title:"Parser",description:"The parser is made using Bison and Flex.",source:"@site/docs/Assignments/Mini Shell/util/parser/README.md",sourceDirName:"Assignments/Mini Shell/util/parser",slug:"/Assignments/Mini Shell/util/parser/",permalink:"/ec960feef1e0e81bd6f0a431dfec5e450cc8b2c4/Assignments/Mini Shell/util/parser/",draft:!1,tags:[],version:"current",frontMatter:{}},o={},p=[{value:"Compile",id:"compile",level:2},{value:"Usage",id:"usage",level:2},{value:"Build process",id:"build-process",level:3},{value:"Example",id:"example",level:3},{value:"Tests",id:"tests",level:3},{value:"Note",id:"note",level:4},{value:"Other information",id:"other-information",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"parser"},"Parser"),(0,a.kt)("p",null,"The parser is made using ",(0,a.kt)("a",{parentName:"p",href:"http://www.gnu.org/software/bison/"},"Bison")," and ",(0,a.kt)("a",{parentName:"p",href:"http://flex.sourceforge.net/"},"Flex"),"."),(0,a.kt)("p",null,"The parser is used to parse the commands entered by the user, stored in structure ",(0,a.kt)("inlineCode",{parentName:"p"},"command_t"),"."),(0,a.kt)("p",null,"This structure is defined in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.h")," and encapsulates a tree representation of the command."),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayStructure.cpp")," to display the structure using various ",(0,a.kt)("a",{parentName:"p",href:"#tests"},"tests"),"."),(0,a.kt)("p",null,"Also you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"CUseParser.c")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"UseParser.cpp")," to see how to use the parser in C or C++ and print the structure of the command."),(0,a.kt)("h2",{id:"compile"},"Compile"),(0,a.kt)("p",null,"Run the following commands in the root of parser directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"student@os:/.../minishell/util/parser$ make\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The parser is represented by two files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parser.y")," - implementation of the parser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parser.l")," - implementation of the lexer")),(0,a.kt)("h3",{id:"build-process"},"Build process"),(0,a.kt)("p",null,"The Makefile first generates the files ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.yy.c")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.tab.c")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.y")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.l"),".\nAfter that, it compiles the files ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.yy.c")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.tab.c")," to generate the object files ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.yy.o")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.tab.o"),".\nTo use the parser, you need to link the object files ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.yy.o")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.tab.o")," with your program."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CUseParser.c")," - example of using the parser in C"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UseParser.cpp")," - example of using the parser in C++"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DisplayStructure.cpp")," - reads multiple commands and displays the structure of the resulting tree")),(0,a.kt)("h3",{id:"tests"},"Tests"),(0,a.kt)("p",null,"More tests can be found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tests")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"student@os:/.../minishell/util/parser$ cd tests\n\nstudent@os:/.../minishell/util/parser/tests$ ../DisplayStructure &>small_tests.out <small_tests.txt\n\nstudent@os:/.../minishell/util/parser/tests$ cat small_tests.out\n> mkdir tmp\nCommand successfully read!\ncommand_t (\n    scmd (\n        simple_command_t (\n            verb (\n                'mkdir'\n            )\n            params (\n                'tmp'\n            )\n        )\n    )\n)\n\n> cd tmp\nCommand successfully read!\ncommand_t (\n    scmd (\n\n...\nstudent@os:/.../minishell/util/parser/tests$ ../DisplayStructure &>ugly_tests.out <ugly_tests.txt\n\nstudent@os:/.../minishell/util/parser/tests$ ../DisplayStructure &>negative_tests.out <negative_tests.txt\n")),(0,a.kt)("h4",{id:"note"},"Note"),(0,a.kt)("p",null,"The parser will fail with an error of unknown character if you use the Linux parser (which considers the end of line as ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n"),") on Windows files (end of line as ",(0,a.kt)("inlineCode",{parentName:"p"},"\\r\\n"),") because at the end of the lines (returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"getline()"),") there will be a ",(0,a.kt)("inlineCode",{parentName:"p"},"\\r")," followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"\\n"),".\nThe opposite works (Windows parser with Linux files).\nThe test files use the Linux convention (",(0,a.kt)("inlineCode",{parentName:"p"},"\\n"),")."),(0,a.kt)("h3",{id:"other-information"},"Other information"),(0,a.kt)("p",null,"More information about the parser can be found in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"parser.h"),"."))}c.isMDXComponent=!0}}]);